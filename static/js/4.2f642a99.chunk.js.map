{"version":3,"sources":["../node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","views/LoginView.js"],"names":["_slicedToArray","arr","i","Array","isArray","Symbol","iterator","Object","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","value","length","err","unsupportedIterableToArray","TypeError","LoginView","useState","email","setEmail","password","setPassword","dispatch","useDispatch","handleSubmit","useCallback","e","preventDefault","authOperations","className","onSubmit","autoComplete","type","name","onChange","target"],"mappings":"6LAIe,SAASA,EAAeC,EAAKC,GAC1C,OCLa,SAAyBD,GACtC,GAAIE,MAAMC,QAAQH,GAAM,OAAOA,EDIxB,CAAeA,IELT,SAA+BA,EAAKC,GACjD,GAAsB,qBAAXG,QAA4BA,OAAOC,YAAYC,OAAON,GAAjE,CACA,IAAIO,EAAO,GACPC,GAAK,EACLC,GAAK,EACLC,OAAKC,EAET,IACE,IAAK,IAAiCC,EAA7BC,EAAKb,EAAII,OAAOC,cAAmBG,GAAMI,EAAKC,EAAGC,QAAQC,QAChER,EAAKS,KAAKJ,EAAGK,QAEThB,GAAKM,EAAKW,SAAWjB,GAH8CO,GAAK,IAK9E,MAAOW,GACPV,GAAK,EACLC,EAAKS,EACL,QACA,IACOX,GAAsB,MAAhBK,EAAW,QAAWA,EAAW,SAC5C,QACA,GAAIJ,EAAI,MAAMC,GAIlB,OAAOH,GFnBuB,CAAqBP,EAAKC,IAAM,OAAAmB,EAAA,GAA2BpB,EAAKC,IGLjF,WACb,MAAM,IAAIoB,UAAU,6IHIgF,K,gFI2DvFC,UA5DG,WAAO,IAAD,EACIC,mBAAS,IADb,mBACfC,EADe,KACRC,EADQ,OAMUF,mBAAS,IANnB,mBAMfG,EANe,KAMLC,EANK,KAWhBC,EAAWC,cAEXC,EAAeC,uBACnB,SAACC,GACCA,EAAEC,iBAEFL,EAASM,IAAqB,CAAEV,QAAOE,cAEvCD,EAAS,IACTE,EAAY,MAEd,CAACC,EAAUJ,EAAOE,IAGpB,OACE,sBAAKS,UAAU,UAAf,UACE,oBAAIA,UAAU,QAAd,kDAEA,uBAAMC,SAAUN,EAAcK,UAAU,WAAWE,aAAa,MAAhE,UACE,wBAAOF,UAAU,YAAjB,iBAEE,uBACEA,UAAU,QACVG,KAAK,QACLC,KAAK,QACLtB,MAAOO,EACPgB,SAnCU,SAACR,GACnBP,EAASO,EAAES,OAAOxB,aAsCd,wBAAOkB,UAAU,YAAjB,qBAEE,uBACEA,UAAU,QACVG,KAAK,WACLC,KAAK,WACLtB,MAAOS,EACPc,SAzCa,SAACR,GACtBL,EAAYK,EAAES,OAAOxB,aA4CjB,wBAAQkB,UAAU,MAAMG,KAAK,SAA7B","file":"static/js/4.2f642a99.chunk.js","sourcesContent":["import arrayWithHoles from \"@babel/runtime/helpers/esm/arrayWithHoles\";\nimport iterableToArrayLimit from \"@babel/runtime/helpers/esm/iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableRest from \"@babel/runtime/helpers/esm/nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import React, { useState, useCallback } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport * as authOperations from \"../redux/auth/auth-operations\";\n\nconst LoginView = () => {\n  const [email, setEmail] = useState(\"\");\n  const updateEmail = (e) => {\n    setEmail(e.target.value);\n  };\n\n  const [password, setPassword] = useState(\"\");\n  const updatePassword = (e) => {\n    setPassword(e.target.value);\n  };\n\n  const dispatch = useDispatch();\n\n  const handleSubmit = useCallback(\n    (e) => {\n      e.preventDefault();\n\n      dispatch(authOperations.logIn({ email, password }));\n\n      setEmail(\"\");\n      setPassword(\"\");\n    },\n    [dispatch, email, password]\n  );\n\n  return (\n    <div className=\"wrapper\">\n      <h1 className=\"title\">Please enter your login and password</h1>\n\n      <form onSubmit={handleSubmit} className=\"authForm\" autoComplete=\"off\">\n        <label className=\"authLabel\">\n          Mail\n          <input\n            className=\"input\"\n            type=\"email\"\n            name=\"email\"\n            value={email}\n            onChange={updateEmail}\n          />\n        </label>\n\n        <label className=\"authLabel\">\n          Password\n          <input\n            className=\"input\"\n            type=\"password\"\n            name=\"password\"\n            value={password}\n            onChange={updatePassword}\n          />\n        </label>\n\n        <button className=\"btn\" type=\"submit\">\n          Log in\n        </button>\n      </form>\n    </div>\n  );\n};\n\nexport default LoginView;\n\n// ===== class =====\n// class LoginView extends Component {\n//   state = {\n//     email: \"\",\n//     password: \"\",\n//   };\n\n//   handleChange = ({ target: { name, value } }) => {\n//     this.setState({ [name]: value });\n//   };\n\n//   handleSubmit = (e) => {\n//     e.preventDefault();\n\n//     this.props.onLogin(this.state);\n\n//     this.setState({ name: \"\", email: \"\", password: \"\" });\n//   };\n\n//   render() {\n//     const { email, password } = this.state;\n\n//     return (\n//       <div className=\"wrapper\">\n//         <h1 className=\"title\">Please enter your login and password</h1>\n\n//         <form\n//           onSubmit={this.handleSubmit}\n//           className=\"authForm\"\n//           autoComplete=\"off\"\n//         >\n//           <label className=\"authLabel\">\n//             Mail\n//             <input\n//               className=\"input\"\n//               type=\"email\"\n//               name=\"email\"\n//               value={email}\n//               onChange={this.handleChange}\n//             />\n//           </label>\n\n//           <label className=\"authLabel\">\n//             Password\n//             <input\n//               className=\"input\"\n//               type=\"password\"\n//               name=\"password\"\n//               value={password}\n//               onChange={this.handleChange}\n//             />\n//           </label>\n\n//           <button className=\"btn\" type=\"submit\">\n//             Log in\n//           </button>\n//         </form>\n//       </div>\n//     );\n//   }\n// }\n\n// const mapDispatchToProps = {\n//   onLogin: authOperations.logIn,\n// };\n\n// export default connect(null, mapDispatchToProps)(LoginView);\n"],"sourceRoot":""}